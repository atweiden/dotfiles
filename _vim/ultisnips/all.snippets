priority -60

###########################################################################
#                         Default UltiSnips                               #
###########################################################################

# This file contains snippets that are always defined. I personally
# have snippets for signatures and often needed texts

# slightly lower priority than everything else since specialized versions
# should overwrite. The user needs to adjust her priority in her snippets to
# ~-55 so that other filetypes will still overwrite.

##############
# Nice Boxes #
##############
global !p
import string, vim

def complete(tab, opts):
		"""
    get options that start with tab

    :param tab: query string
    :param opts: list that needs to be completed

    :return: a string that start with tab
    """
		msg = "({0})"
		if tab:
				opts = [m[len(tab):] for m in opts if m.startswith(tab)]
		if len(opts) == 1:
				return opts[0]

		if not len(opts):
				msg = "{0}"
		return msg.format("|".join(opts))

""" Maps a filetype to comment format used for boxes.
Automatically filled during usage"""
_commentDict = { }

def _parse_comments(s):
	""" Parses vim's comments option to extract comment format """
	i = iter(s.split(","))

	rv = []
	try:
		while True:
			# get the flags and text of a comment part
			flags, text = next(i).split(':', 1)

			if len(flags) == 0:
				rv.append((text, text, text, ""))
			# parse 3-part comment, but ignore those with O flag
			elif flags[0] == 's' and 'O' not in flags:
				ctriple = []
				indent = ""

				if flags[-1] in string.digits:
					indent = " " * int(flags[-1])
				ctriple.append(text)

				flags,text = next(i).split(':', 1)
				assert(flags[0] == 'm')
				ctriple.append(text)

				flags,text = next(i).split(':', 1)
				assert(flags[0] == 'e')
				ctriple.append(text)
				ctriple.append(indent)

				rv.append(ctriple)
			elif flags[0] == 'b':
				if len(text) == 1:
					rv.insert(0, (text,text,text, ""))
	except StopIteration:
		return rv

def _get_comment_format():
	""" Returns a 4-element tuple representing the comment format for
	the current file. """
	return _parse_comments(vim.eval("&comments"))[0]

def make_box(twidth, bwidth=None):
	b, m, e, i = _get_comment_format()
	bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth + 2
	sline = b + m + bwidth_inner * m[0] + 2 * m[0]
	nspaces = (bwidth_inner - twidth) // 2
	mlines = i + m + " " + " " * nspaces
	mlinee = " " + " "*(bwidth_inner - twidth - nspaces) + m
	eline = i + m + bwidth_inner * m[0] + 2 * m[0] + e
	return sline, mlines, mlinee, eline

def foldmarker():
	"Return a tuple of (open fold marker, close fold marker)"
	return vim.eval("&foldmarker").split(",")

endglobal

snippet box "A nice box with the current comment symbol" b
`!p
box = make_box(len(t[1]))
snip.rv = box[0] + '\n' + box[1]
`${1:content}`!p
box = make_box(len(t[1]))
snip.rv = box[2] + '\n' + box[3]`
$0
endsnippet

snippet bbox "A nice box over the full width" b
`!p
width = int(vim.eval("&textwidth")) or 71
box = make_box(len(t[1]), width)
snip.rv = box[0] + '\n' + box[1]
`${1:content}`!p
box = make_box(len(t[1]), width)
snip.rv = box[2] + '\n' + box[3]`
$0
endsnippet

snippet fold "Insert a vim fold marker" b
`!p snip.rv = _get_comment_format()[0]` ${1:Fold description} `!p snip.rv = foldmarker()[0]`${2:1} `!p snip.rv = _get_comment_format()[2]`
endsnippet

snippet foldc "Insert a vim fold close marker" b
`!p snip.rv = _get_comment_format()[0]` ${2:1}`!p snip.rv = foldmarker()[1]` `!p snip.rv = _get_comment_format()[2]`
endsnippet

snippet foldp "Insert a vim fold marker pair" b
`!p snip.rv = _get_comment_format()[0]` ${1:Fold description} `!p snip.rv = foldmarker()[0]` `!p snip.rv = _get_comment_format()[2]`
${2:${VISUAL:Content}}
`!p snip.rv = _get_comment_format()[0]` `!p snip.rv = foldmarker()[1]` $1 `!p snip.rv = _get_comment_format()[2]`
endsnippet

##########################
# Lorem Ipsum Generators #
##########################
snippet lorem "Lorem Ipsum - 50 Words" b
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
no sea takimata sanctus est Lorem ipsum dolor sit amet.
endsnippet

###################
# Repo Generators #
###################
# these snippets require the reporoot vim plugin
# https://github.com/jmcantrell/vim-reporoot

snippet gh "github project url" w!
https://github.com/`!v $USER`/`!v GetRepoName('%')`
endsnippet

snippet bb "bitbucket project url" w!
https://bitbucket.org/`!v $USER`/`!v GetRepoName('%')`
endsnippet

########
# UUID #
########
snippet uuid "random uuid" w!
`!p if not snip.c: import uuid; snip.rv = str(uuid.uuid4())`
endsnippet

#############
# Date/Time #
#############
snippet time "time (h:m:s)" w!
`!v strftime('%H:%M:%S')`
endsnippet

snippet date "date (y-m-d)" w!
`!v strftime("%Y-%m-%d")`
endsnippet

snippet Date "date (pretty)" w!
`!v strftime('%A, %d %B %Y')`
endsnippet

############
# Licenses #
############
snippet lic "Apache License, Version 2.0" b
Copyright `!v strftime('%Y')` ${1:-Author}

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

${2}
endsnippet

snippet lic "GNU General Public License, Version 2" b
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

Copyright (C) ${1:Author}, `!v strftime("%Y")`

${2}
endsnippet

snippet lic "Boost License, Version 1.0" b
				 Copyright ${1:Author} `!v strftime("%Y")`.
Distributed under the Boost Software License, Version 1.0.
	 (See accompanying file LICENSE_1_0.txt or copy at
				 http://www.boost.org/LICENSE_1_0.txt)

${2}
endsnippet

# vim:ft=snippets:
