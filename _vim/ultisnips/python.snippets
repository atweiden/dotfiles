global !p
from snippets import *

def get_args(arglist, snip):
    args = [arg.split('=')[0].strip() for arg in arglist.split(',') if arg]
    args = [arg for arg in args if arg and arg != "self"]
    return args

endglobal

snippet #! "shebang" b!
#!/usr/bin/env python
$0
endsnippet

snippet r "r'...'" w!
r${1:'}${2:${VISUAL}}$1
endsnippet

snippet b "b'...'" w!
b${1:'}${2:${VISUAL}}$1
endsnippet

snippet u "u'...'" w!
u${1:'}${2:${VISUAL}}$1
endsnippet

snippet echo "debug variables" b!
print("$2`!p snip.rv = echo(t, '{}')`".format($1))
endsnippet

snippet main "argument parsing" b!
from argparse import ArgumentParser


def parse_args():
	p = ArgumentParser(description=__doc__)
	p.add_argument('integers', metavar='N', type=int, nargs='+', help='an integer')
	p.add_argument('-s', '--sum', dest='accumulate', action='store_const', const=sum, default=max, help='sum the integers (default: find the max)')
	return p.parse_args()


def main():
	args = parse_args()
	print(args.accumulate(args.integers))


if __name__ == '__main__':
	main()
endsnippet

snippet from "from package import module" b!
from ${1:package} import ${2:module}
endsnippet

snippet for "for item in items" b!
for ${1:item} in ${2:items}:
	${3:${VISUAL:pass}}
endsnippet

snippet while "while condition" b!
while ${1:True}:
	${0:${VISUAL:pass}}
endsnippet

snippet class "class name(base): ..." b!
class ${1:App}(${2:object}):

	def __init__(self$4):
		`!p snip.rv = "super(%s, self).__init__(%s)" % (t[1], t[4].strip(',').strip())`
endsnippet

snippet def "def name(arguments): ..." b!
def ${1:fname}(${2:`!v indent('.') ? 'self' : ''`}$3):
	${0:${VISUAL:pass}}
endsnippet

snippet prop "property" b!
@property
def ${1:name}(self):
	return ${2:self.get('main', '$1')}
endsnippet

snippet /(^|(?<=\W))\./ "self." ir!
self.
endsnippet

snippet if "if condition: ..." b!
if ${1:True}:
	${0:${VISUAL:pass}}
endsnippet

snippet elif "elif condition: ..." b!
elif ${1:True}:
	${0:${VISUAL:pass}}
endsnippet

snippet else "else: ..." b!
else:
	${0:${VISUAL:pass}}
endsnippet

snippet try "try: ... except exception: ..." b!
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
$0
endsnippet

snippet finally "finally: ..." b!
finally:
	${0:${VISUAL:pass}}
endsnippet

snippet __ "__name__" w!
__${1:init}__$0
endsnippet

snippet contain "container methods" b
def __len__(self):
	${1:pass}

def __getitem__(self, key):
	${2:pass}

def __setitem__(self, key, value):
	${3:pass}

def __delitem__(self, key):
	${4:pass}

def __iter__(self):
	${5:pass}

def __reversed__(self):
	${6:pass}

def __contains__(self, item):
	${7:pass}
endsnippet

snippet context "context manager methods" b
def __enter__(self):
	${1:pass}

def __exit__(self, exc_type, exc_value, traceback):
	${2:pass}
endsnippet

snippet attr "attribute access methods" b
def __getattr__(self, name):
	${1:pass}

def __setattr__(self, name, value):
	${2:pass}

def __delattr__(self, name):
	${3:pass}
endsnippet

snippet desc "descriptor methods" b
def __get__(self, instance, owner):
	${1:pass}

def __set__(self, instance, value):
	${2:pass}

def __delete__(self, instance):
	${3:pass}
endsnippet

snippet cmp "rich comparison methods"
def __eq__(self, value):
	${1:pass}

def __ne__(self, value):
	${2:pass}

def __lt__(self, value):
	${3:pass}

def __le__(self, value):
	${4:pass}

def __gt__(self, value):
	${5:pass}

def __ge__(self, value):
	${6:pass}

def __cmp__(self, value):
	${7:pass}
endsnippet

snippet repr "string representation methods"
def __repr__(self, value):
	${1:pass}

def __str__(self, value):
	${2:pass}

def __unicode__(self, value):
	${3:pass}
endsnippet

snippet numeric "numeric methods" b
def __add__(self, value):
	${1:pass}

def __sub__(self, value):
	${2:pass}

def __mul__(self, value):
	${3:pass}

def __div__(self, value):
	${4:pass}

def __truediv__(self, value):
	${5:pass}

def __floordiv__(self, value):
	${6:pass}

def __mod__(self, value):
	${7:pass}

def __divmod__(self, value):
	${8:pass}

def __pow__(self, value):
	${9:pass}

def __lshift__(self, value):
	${10:pass}

def __rshift__(self, value):
	${11:pass}

def __and__(self, value):
	${12:pass}

def __xor__(self, value):
	${13:pass}

def __or__(self, value):
	${14:pass}

def __neg__(self):
	${15:pass}

def __pos__(self):
	${16:pass}

def __abs__(self):
	${17:pass}

def __invert__(self):
	${18:pass}

def __complex__(self):
	${19:pass}

def __int__(self):
	${20:pass}

def __long__(self):
	${21:pass}

def __float__(self):
	${22:pass}

def __oct__(self):
	${22:pass}

def __hex__(self):
	${23:pass}

def __index__(self):
	${24:pass}

def __coerce__(self, value):
	${25:pass}
endsnippet

snippet pudb "pudb trace" b!
import pudb; pudb.set_trace()
endsnippet

snippet pdb "pdb trace" b!
import pdb; pdb.set_trace()
endsnippet

snippet ae "assertEqual(first, second)" b
self.assertEqual(${1:first}, ${2:second})
endsnippet

snippet at "assertTrue(expression)" b
self.assertTrue(${0:exp})
endsnippet

snippet af "assertFalse(expression)" b
self.assertFalse(${1:expression})
endsnippet

snippet aae "assertAlmostEqual(first, second)" b
self.assertAlmostEqual(${1:first}, ${2:second})
endsnippet

snippet ar "assertRaises(exception, function, arguments)" b
self.assertRaises(${1:exception}, ${2:func}${3/.+/, /}${3:arguments})
endsnippet

snippet xmlc "xml element class" b!
class ${1:Result}(Element):

	def __init__(self, e):
		super($1, self).__init__(e)
		$0
endsnippet

snippet xmle "xml element text" b!
self.${1:name} = e.find('$1').text
endsnippet

snippet xmll "xml list" b!
self.${1:name} = []
for x in e.find('$1'):
	self.$1.append(x.text)
endsnippet

snippet xmld "xml dictionary" b!
self.${1:name} = {}
for x in e.find('$1'):
	self.$1[x.get('${2:key}')] = x.text
endsnippet

snippet xml "xml element base" b!
def is_list(value):
	return isinstance(value, (tuple, list))

class Element(object):

	def __init__(self, e):
		super(Element, self).__init__()
		self.e = e

	def set_attribute(self, name, f=None):
		value = self.e.get(name)
		try:
			if f: value = f(value)
		except TypeError:
			pass
		setattr(self, name, value)

	def set_element(self, name, f=None):
		try:
			value = self.e.find(name).text
			if f: value = f(value)
		except AttributeError:
			value = None
		setattr(self, name, value)

	def set_elements(self, names, f=None):
		for name in names:
			self.set_element(name, f)

	def set_dict(self, name, keys):
		e = self.e.find(name)
		data = {}
		for key in keys:
			f = None
			if is_list(key): key, f = key
			value = e.find(key).text
			if f: value = f(value)
			data[key] = value
		setattr(self, name, data)

	def set_element_list(self, name, f=None):
		values = []
		for x in self.e.find(name):
			v = x.text
			if f: value = f(v)
			values.append(v)
		setattr(self, name, values)

	def set_element_dict(self, name, key, fkey=None, fvalue=None):
		data = {}
		for x in self.e.find(name):
			k = x.get(key)
			if fkey: k = fkey(k)
			v = x.text
			if fvalue: v = fvalue(v)
			data[k] = v
		setattr(self, name, data)
endsnippet

snippet abm "Abstract Method" b!
def ${1:method}(self${2}):
	raise NotImplementedError
endsnippet

snippet p "print(...)" b!
print(${1:${VISUAL}})
endsnippet

snippet pp "pprint(...)" b!
import pprint; pprint.pprint(${1:${VISUAL}})
endsnippet
