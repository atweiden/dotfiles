global !p
from snippets import *
endglobal

snippet import "import( ... )" b!
import (
	$0
)
endsnippet

snippet main "func main() { ... }" b!
func main() {
	$0
}
endsnippet

snippet v "var name = value" b!
var ${1:name} = ${2:value}
endsnippet

snippet vv "var ( ... )" b!
var (
	$0
)
endsnippet

snippet p "fmt.Println(...)" b!
fmt.Println($1)
endsnippet

snippet pp "fmt.Println( ... )" b!
fmt.Println(
	$0
)
endsnippet

snippet f "func name(...) { ... }" b!
func ${1:name}($2) ${3:type} {
	$0
}
endsnippet

snippet c "const Name = value" b!
const ${1:Name} = ${2:value}
endsnippet

snippet cc "const ( ... )" b!
const (
	$0
)
endsnippet

snippet for "for expr; cond; incr { ... }" b!
for ${1:i} := ${2:0}; $1 < ${3:length}; $1++ {
	$0
}
endsnippet

snippet while "for cond { ... }" b!
for ${1:condition} {
	$0
}
endsnippet

snippet range "for n, value := range items { ... }" b!
for n, value := range ${1:items} {
	$0
}
endsnippet

snippet if "if cond { ... }" b!
if ${1:condition} {
	$0
}
endsnippet

snippet else "} else {" b!
} else {
	$0
endsnippet

snippet struct "type Name struct { ... }" b!
type ${1:Name} struct {
	$2
}
endsnippet

snippet switch "switch var { ... }" b!
switch ${1:value} {
	$0
}
endsnippet

snippet case "case value: ..." b!
case ${1:value}:
	$0
endsnippet

snippet m "map[keyType] valueType" b!
map[${1:keyType}] ${2:valueType}
endsnippet

snippet def "struct method" b!
func (self *${1:type}) ${2:Name}($3) $4 {
	$0
}
endsnippet

snippet i "type Name interface { ... }" b!
type ${1:Name} interface {
	$0
}
endsnippet
